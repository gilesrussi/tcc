<?php

use App\User;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;


/**
 * Class TestFriendship
 *
 */
class TestFriendship extends TestCase {

    use DatabaseTransactions;

    /** @var User $user1 */
    protected $user1;
    /** @var  User $user2 */
    protected $user2;

    function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user1 = factory(User::class)->create();
        $this->user2 = factory(User::class)->create();

    }
    
    /** @test */
    function it_sends_friendship_requests() {
        $this->user1->sendFriendshipRequest($this->user2);
        $this->assertTrue($this->user1->isWaitingForResponseFrom($this->user2));
        $this->assertTrue($this->user2->canRespondTo($this->user1));
        $this->assertFalse($this->user1->canRespondTo($this->user2));
        $this->assertFalse($this->user1->noEntry($this->user2));
        $this->assertFalse($this->user1->isFriend($this->user2));
    }
    
    /** @test */
    function it_can_accept_friendship_requests() {
        $this->user2->sendFriendshipRequest($this->user1);
        $this->user1->acceptFriendshipRequest($this->user2);
        $this->assertTrue($this->user1->isFriend($this->user2));
        $this->assertTrue($this->user2->isFriend($this->user1));
    }

    /** @test */
    function once_friendship_request_is_sent_it_can_cancel_the_request() {
        $this->user1->sendFriendshipRequest($this->user2);
        $this->user1->cancelFriendshipRequest($this->user2);
        $this->assertTrue($this->user1->noEntry($this->user2));
        $this->assertTrue($this->user2->noEntry($this->user1));
    }
    
    /** @test */
    function it_can_reject_friendship_requests() {
        $this->user1->sendFriendshipRequest($this->user2);
        $this->user2->rejectFriendshipRequest($this->user1);
        $this->assertTrue($this->user1->noEntry($this->user2));
        $this->assertTrue($this->user2->noEntry($this->user1));

    }

    /** @test */
    function it_can_stop_being_friends() {
        $this->user1->sendFriendshipRequest($this->user2);
        $this->user2->acceptFriendshipRequest($this->user1);
        $this->user1->breakFriendship($this->user2);

        $this->assertTrue($this->user1->noEntry($this->user2));
        $this->assertTrue($this->user2->noEntry($this->user1));
    }

}
